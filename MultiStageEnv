For example, the memory requirements for a development server might be different than those for staging and production and 
it's important to have explicit control over how the variables that represent those requirements are prioritized.

Using Group Variables
At first glance, it may appear that group variables provide all of the separation between environments that Ansible requires.
You can designate certain servers as belonging to your development environment, and others can be assigned to the staging and production 
areas.

If the same variable is set by more than one group for a host, Ansible has no way of explicitly specifying precedence.
Instead, Ansible uses the last loaded value. Since Ansible evaluates groups alphabetically, the variable associated with whichever group 
name happens to be last in dictionary ordering will win.

Using Group Childern to Establish hierarchy
Ansible allows you to assign groups to other groups using the [groupname:children] syntax in the inventory. This gives you the ability to
name certain groups members of other groups. Children groups have the ability to override variables set by the parent groups.

Typically, this is used for natural classification. For example, we could have a group called environments that includes the groups dev, 
stage, prod. This means we could set variables in the environment group and override them in the dev group.

This usage does not solve the problem of group intersection since child groups only override their parents. Child groups can override
variables within the parent, but the above organization has not established any relationship between group categories, like environments 
and functions. The variable precedence between the two categories is still undefined.

Example
. . .
[function:children]
web
database
loadbalancer
region

[region:children]
nyc
sfo
environments

[environments:children]
dev
stage
prod

We've established a hierarchy here that allows regional variables to override the functional variables since the region group is a 
child of the function group. Likewise, variables set in the environments groups can override any of the others. This means that if we
set the same variable to a different value in the dev, nyc, and web groups, a host belonging to each of these would use the variable 
from dev.

Using Ansible Constructs that Allow Explicit Loading Order
There are a few constructs within Ansible that allow explicit variable load ordering, namely vars_files and include_vars. 
These can be used within Ansible plays to explicitly load additional variables in the order defined within the file. 
The vars_files directive is valid within the context of a play, while the include_vars module can be used in tasks.

The general idea is to set only basic identifying variables in group_vars and then leverage these to load the correct variable files 
with the rest of the desired variables.

group_vars/dev
---
env: dev

group_vars/stage
---
env: stage

group_vars/web
---
function: web

We would then have a separate vars file that defines the important variables for each group. These are typically kept in a separate 
vars directory for clarity. Unlike group_vars files, when dealing with include_vars, files must include a .yml file extension.

vars/dev.yml
---
server_memory_size: 512mb

vars/prod.yml
---
server_memory_size: 4gb

vars/web.yml
---
server_memory_size: 1gb

We could then create a playbook that explicitly loads the correct vars file based on the values assigned to the host from the 
group_vars files

---
- name: variable precedence test
  hosts: all
  vars_files:
    - "vars/{{ env }}.yml"
    - "vars/{{ function }}.yml"
  tasks:
    - debug: var=server_memory_size

More importantly, relying on these techniques makes them mandatory. Every playbook will require a section that explicitly loads the 
correct variable files in the correct order. Playbooks without this will be unable to use the associated variables. 

Ansible Recommended Strategy: Using Groups and Multiple Inventories
The recommended approach is to work with multistage environments by completely separating each operating environment. Instead of 
maintaining all of your hosts within a single inventory file, an inventory is maintained for each of your individual environments.
Separate group_vars directories are also maintained.

.
├── ansible.cfg
├── environments/                             # Parent directory for our environment-specific directories
│   │
│   ├── 000_cross_env_vars
│   │
│   ├── dev/                                  # Contains all files specific to the dev environment
│   │   ├── group_vars/                       # dev specific group_vars files
│   │   │   ├── all/
│       │   │   ├── 000_cross_env_vars -> ../../../000_cross_env_vars
│   │   │   │   └── env_specific
│   │   │   ├── db
│   │   │   └── web
│   │   └── hosts                             # Contains only the hosts in the dev environment
│   │
│   ├── prod/
│   │   ├── group_vars/
│   │   │   ├── all/
│   │   │   │   ├── 000_cross_env_vars -> ../../../000_cross_env_vars
│   │   │   │   └── env_specific
│   │   │   ├── db
│   │   │   └── web
│   │   └── hosts
│   │
│   └── stage/
│       ├── group_vars/
│       │   ├── all/
│       │   │   ├── 000_cross_env_vars -> ../../../000_cross_env_vars
│       │   │   └── env_specific
│       │   ├── db
│       │   └── web
│       └── hosts
│
├── playbook.yml
│
└── . . .

Both files (000_cross_env_vars & env_specific) in all directory of group_vars will be applied to all hosts within the environment.

$ansible -i environments/dev -m ping

As mentioned above, it is recommended to set your development environment as the default inventory. Notice how we can select the entire
environment directory instead of the hosts file it contains:

$nano ansible.cfg
[defaults]
inventory = ./environments/dev
