 Variables are provided through the inventory, by variable files, overwritten on the command line and set in Tower.
 
 defaults/main.yaml:  they are default variables if you don't specify host related value.
 ---------------------------------------------------
 nginx_service_name: nginx
 nginx_yum_packages:
  - epel-release
  - nginx
 nginx_port: 80

Host Variables
-----------------------------------------------------
For host specific needs
Ad-hoc way -- in inventory file
[atlanta]
host1  http_port=80 maxRequestsPerChild=808
host2  http_port=303 maxRequestsPerChild=909

Best Practice -- host_vars folder
---
# file: /etc/ansible/host_vars/xyz.boston.example.com
ntp_server: override.example.com

Group Variables
-----------------------------------------------------
Ad-hoc way -- inventory file
[atlanta]
host1
host2

[atlanta:vars]
ntp_server=ntp.atlanta.example.com
proxy=proxy.atlanta.example.com

Best Practice --  group_vars folder
For example, you can define variables for group raleigh in file /etc/ansible/group_vars/raleigh, using the following lines:
---
ntp_server: acme.example.org
database_server: storage.example.org

Playbook Variables
-------------------------------------------------
Ad-hoc way -- vars attribute
...
hosts: all 
vars:
  play_var: bar 
 
tasks:
...
    OR
- hosts: all
  vars:
    python:
      Designer: 'Guido van Rosum'
      Developer: 'Python Software Foundation'
      OS: 'Cross-platform'
  tasks:
  - name: Ansible Dictionary Example
    debug:
      msg: "{{python['Designer'] }}"
      OR
      msg: "{{python.Designer }}"

Best Practice -- vars_files or include_vars attribute
The vars_files directive is valid within the context of a play, while the include_vars module can be used in tasks.

- hosts: localhost
  vars_files:
    - "vars/{{ name }}.yml"  --- vars is directory in which variable file is save
  tasks:
    - debug: var={{ foo }}

   OR
...
hosts: all
tasks:
  include_vars: 
    file: setupvariables.yml
 

...
    OR
...
hosts: all
tasks:
include_vars: 
  file: "{{ ansible_hostname }}.yml"

...

 Variables & Loops
 ---------------------------------------------------------
 vars:
     fl: [ alpha, beta]
 tasks:
  - name: copy files
    copy: src={{ item }} dest=/tmp/{{ item }}
    with_items: {{ fl }}
    
  
Variables & Templates
----------------------------------------------------------
$ cat template.j2
My host name is {{ ansible_hostname }}.

tasks:
  - name: copy template
    template: src=template.j2 dest="/tmp/abcapp.conf"

In templates variables are also referenced by {{ }}.

Variables in Conditions
------------------------------------------------------
tasks:
  - name: install Apache on Solaris
    pkg5: name=web/server/apache-24
    when: ansible_os_family == "Solaris"
 
Variables from Systems
-------------------------------------------------------
Facts gatering
$ ansible neon -m setup

Variables can also be set by dumping specialized files onto the system: when Ansible accesses a remote system it checks for the 
directory /etc/ansible/facts.d and all files ending in .fact are read. 
The files can be of various formats – INI, JSON, or even executables which return JSON code. 
$ cat /etc/ansible/facts.d/variables.fact 
[system]
foo=bar
dim=dum

Variables from command line
------------------------------------------------------------
$ ansible-playbook --extra-vars "cli_var=production" system-setup.yml

$ cat template.j2
environment: {{ cli_var }}.


      
Variables in Inventory File
-----------------------------------------------------------
[clients]
helium intevent_var=helium_123
neon invent_var=bar

It is also possible to set variables for entire host groups:
[clients]
helium
neon
 
[clients:vars]
invent_var=group-foo

Register Variables for tasks result
----------------------------------------------------------
  tasks:
    - name: start service
      service: name=httpd state=started
      ignore_errors: True
      register: service_result
 
    - name: shutdown
      command: "shutdown -h +1m"
      when: service_result | failed
 
 Accessing Variables of Other Hosts
 ------------------------------------
 Last but not least it might be interesting to access the variables (read: facts) of other hosts.
 This can of course only be done if the facts are actually available.
 The following template first accesses the host name of the machine “tower” and afterwards collects all the epoch data of all machines:

Tower name is: {{ hostvars['tower']['ansible_hostname'] }}
The epochs of the clients are:
{% for host in groups['clients'] %}
- {{ hostvars[host]['ansible_date_time']['epoch'] }}
{% endfor %}

This comes in handy in simple cases like filling the /etc/hosts

Multiline Variables
---------------------
You can use the ‘|’ operator if you want the new line characters to be included. If you do not want the new line character, 
and you just want to use it for easy understanding during editing then use ‘>’ operator.

- hosts: all
  vars:
    include_newlines_example: |
            The new line charaters
            will appear 

    ignore_newlines_example2: >
            The new line character will 
            be removed. Useful when editing 
            lines
            
  Variables in Role Directory Structure
  ---------------------------------------
webservers.yml
fooservers.yml
roles/
   common/
     tasks/
     handlers/
     files/
     templates/
     vars/
     defaults/
     meta/
   webservers/
     tasks/
     defaults/
     meta/
   
   Each directory above should have maim.yml
   
   
   
